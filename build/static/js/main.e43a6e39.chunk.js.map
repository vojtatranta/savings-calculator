{"version":3,"sources":["number-field.js","App.js","serviceWorker.js","index.js"],"names":["NumberField","defaultValue","min","step","onChange","React","useState","state","setState","type","value","e","parseInt","target","isNaN","Math","max","App","principal","interest","monthlySaving","years","yearNow","formatter","Intl","NumberFormat","style","currency","future","saved","monthlySavings","Array","from","keys","reduce","acc","decimalInterest","prev","interestValue","round","next","values","concat","interests","normalizedFuture","map","index","x","y","data","id","className","find","desc","format","length","height","width","margin","top","right","bottom","left","xScale","yScale","stacked","reverse","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","Boolean","window","location","hostname","match","savedState","JSON","parse","localStorage","getItem","Object","entries","forEach","key","Error","console","warn","getInitialState","log","initialState","appState","handleWindowClose","setItem","stringify","addEventListener","ReactDOM","render","Date","getFullYear","nextState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e43a6e39.chunk.js","sourcesContent":["import React from 'react'\n\nfunction NumberField({ defaultValue, min, step, onChange } = { defaultValue: 0 }) {\n  const [ state, setState  ] = React.useState(0)\n\n  return (\n    <input\n      type='number'\n      step={step || 1}\n      min={min || null}\n      value={state || defaultValue || 0}\n      onChange={(e) => {\n        let value = parseInt(e.target.value || 0)\n        if (!isNaN(parseInt(min))) {\n          value = Math.max(value, min)\n        }\n\n        if (onChange) {\n          onChange(value)\n        }\n        setState(value)\n      }\n      }\n    />\n  )\n}\n\nexport default NumberField\n","import React from 'react';\nimport './App.css';\nimport NumberField from './number-field'\nimport { ResponsiveLine } from '@nivo/line'\n\nconst calculateFutureValue = (principal, interest, monthlySaving, years) => {\n  return Array.from(Array(years).keys()).reduce((acc) => {\n    const decimalInterest =  (1 + (interest / 100))\n    const saved = (acc.prev + (monthlySaving * 12))\n    const interestValue = Math.round(saved * (interest / 100))\n    const next = Math.round(saved * decimalInterest)\n    return {\n      prev: next,\n      values: acc.values.concat(next),\n      interests: acc.interests.concat(interestValue)\n    }\n  }, {\n    prev: principal,\n    values: [principal],\n    interests: [0],\n  })\n}\n\nfunction App({ yearNow, state, setState }) {\n  const formatter = Intl.NumberFormat('cs-CZ', {  style: 'currency', currency: 'CZK'})\n  const future = calculateFutureValue(state.saved, state.interest, state.monthlySavings, state.years || 0)\n\n  const normalizedFuture = future.values\n    .map((value, index) => ({\n      x: yearNow + index,\n      y: value,\n    }))\n\n  const data = [{\n    id: 'Našetřeno',\n    data: normalizedFuture,\n  }]\n\n  return (\n    <div className=\"app is-flexbox has-row-direction\">\n      <div className='calculator has-flex'>\n        <div className='form is-flexbox has-column-direction'>\n          <div className='form-row'>\n            <label><span className='actual-label'>Našetřeno:</span><br/>\n              <NumberField\n                defaultValue={state.saved}\n                step={1000}\n                onChange={value => setState(prev => ({\n                  ...prev,\n                  saved: value,\n                }))}\n              />\n            </label>\n          </div>\n          <div className='form-row'>\n            <label><span className='actual-label'>Kolik let spořím:</span><br/>\n              <NumberField\n                defaultValue={Math.max(state.years, 0)}\n                min={0}\n                onChange={value => setState(prev => ({\n                  ...prev,\n                  years: Math.max(value, 0),\n                }))}\n              />\n            </label>\n          </div>\n          <div className='form-row'>\n            <label><span className='actual-label'>Měsíčně spořím:</span><br/>\n              <NumberField\n                defaultValue={state.monthlySavings}\n                step={100}\n                onChange={value => setState(prev => ({\n                  ...prev,\n                  monthlySavings: value,\n                }))}\n              />\n            </label>\n          </div>\n          <div className='form-row'>\n            <label><span className='actual-label'>Úrok:</span><br/>\n              <NumberField\n                defaultValue={state.interest}\n                onChange={value => setState(prev => ({\n                  ...prev,\n                  interest: value,\n                }))}\n              />%\n            </label>\n          </div>\n          <div className='objectives'>\n            <div className='form-row'>\n              <label><span className='actual-label'>Kolik chcete našetřit:</span><br/>\n                <NumberField\n                  defaultValue={state.target}\n                  step={1000}\n                  onChange={value => setState(prev => ({\n                    ...prev,\n                    target: value || null,\n                  }))}\n                />\n              </label>\n              <div className='objective-predictions'>\n                  <div>\n                    <strong>Našetříte v roce:</strong><br/>\n                    {\n                      normalizedFuture.find(desc => desc.y >= state.target)?.x ||\n                      'Nenašetříte, zvyšte si úrok úspory nebo dobu šetření'\n                    }\n                  </div>\n                  <div>\n                    <strong>Našetřená částka:</strong><br/>\n                    {formatter.format(future.values[future.values.length - 1] || 0)}\n                  </div>\n                  <div>\n                    <strong>Roční úrok z našetřené částky:</strong><br/>\n                    {formatter.format(future.interests[future.interests.length - 1] || 0)}\n                  </div>\n                  <div>\n                    <strong>Měsíční úrok z našetřené částky:</strong><br/>\n                    {formatter.format(Math.round((future.interests[future.interests.length - 1] || 0) / 12))}\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='chart has-flex'>\n        <div style={{ height: 500, width: '100%' }}>\n        <ResponsiveLine\n          data={data}\n          margin={{ top: 50, right: 110, bottom: 50, left: 80 }}\n          xScale={{ type: 'point' }}\n          yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n          axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Roky',\n            legendOffset: 36,\n            legendPosition: 'middle'\n          }}\n          axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Našetřeno',\n            legendOffset: -65,\n            legendPosition: 'middle'\n          }}\n          colors={{ scheme: 'set1' }}\n          pointSize={10}\n          pointColor={{ theme: 'background' }}\n          pointBorderWidth={2}\n          pointBorderColor={{ from: 'serieColor' }}\n          pointLabel='y'\n          pointLabelYOffset={-12}\n          useMesh={true}\n          legends={[{\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            effects: [\n                {\n                    on: 'hover',\n                    style: {\n                        itemBackground: 'rgba(0, 0, 0, .03)',\n                        itemOpacity: 1\n                    }\n                }\n            ]\n          }]}\n        />\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst stateKey = 'calculatorState'\n\nfunction getInitialState() {\n  try {\n    const values = JSON.parse(window.localStorage.getItem(stateKey))\n    Object.entries(values || {}).forEach(([ key, value ]) => {\n      if (isNaN(parseInt(value))) {\n        throw new Error(`Not a number! key: ${key}, value: ${value}`)\n      }\n    })\n    return values\n  } catch (e) {\n    console.warn('State parse error', e)\n    return null\n  }\n}\n\n\nconst savedState = getInitialState()\nconsole.log('sfdsf', savedState)\nconst initialState = savedState || {\n  saved: 100000,\n  years: 10,\n  monthlySavings: 10000,\n  interest: 5,\n  target: 3000000,\n}\n\nlet appState = initialState\n\nfunction handleWindowClose() {\n  window.localStorage.setItem(stateKey, JSON.stringify(appState))\n}\n\nwindow.addEventListener('beforeunload', handleWindowClose)\nwindow.addEventListener('unload', handleWindowClose)\n\n\nfunction AppContainer() {\n  const [ state, setState ] = React.useState(initialState)\n  appState = state\n\n  return (\n    <App yearNow={(new Date().getFullYear())} state={state} setState={(nextState) => {\n      setState(nextState)\n    }} />\n  )\n}\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}