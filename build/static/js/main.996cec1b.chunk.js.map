{"version":3,"sources":["number-field.js","App.js","serviceWorker.js","index.js"],"names":["NumberField","defaultValue","min","step","onChange","React","useState","state","setState","type","value","e","parseInt","target","isNaN","Math","max","calculateFutureValue","principal","interest","monthlySaving","years","Array","from","keys","reduce","acc","saved","prev","interestValue","round","next","values","concat","interests","App","yearNow","formatter","Intl","NumberFormat","style","currency","future","monthlySavings","inHundredYears","map","index","x","y","console","log","data","id","endOfTheYearInterest","length","monthlyEndOfTheYearInterest","className","find","desc","format","height","width","yFormat","v","margin","top","right","bottom","left","xScale","yScale","stacked","reverse","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","Boolean","window","location","hostname","match","initialState","JSON","parse","localStorage","getItem","Object","entries","forEach","key","Error","warn","getInitialState","appState","handleWindowClose","setItem","stringify","addEventListener","ReactDOM","render","Date","getFullYear","nextState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.996cec1b.chunk.js","sourcesContent":["import React from 'react'\n\nfunction NumberField({ defaultValue, min, step, onChange } = { defaultValue: 0 }) {\n  const [ state, setState  ] = React.useState(0)\n\n  return (\n    <input\n      type='number'\n      step={step || 1}\n      min={min || null}\n      value={state || defaultValue || 0}\n      onChange={(e) => {\n        let value = parseInt(e.target.value || 0)\n        if (!isNaN(parseInt(min))) {\n          value = Math.max(value, min)\n        }\n\n        if (onChange) {\n          onChange(value)\n        }\n        setState(value)\n      }\n      }\n    />\n  )\n}\n\nexport default NumberField\n","import React from \"react\";\nimport \"./App.css\";\nimport NumberField from \"./number-field\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nconst calculateFutureValue = (principal, interest, monthlySaving, years) => {\n  return Array.from(Array(years).keys()).reduce(\n    (acc) => {\n      const saved = (acc.prev ?? principal) + monthlySaving * 12;\n      const interestValue = Math.round(saved * (interest / 100));\n      const next = Math.round(saved + interestValue);\n      return {\n        prev: next,\n        values: acc.values.concat(next),\n        interests: acc.interests.concat(interestValue),\n      };\n    },\n    {\n      prev: null,\n      values: [],\n      interests: [],\n    }\n  );\n};\n\nfunction App({ yearNow, state, setState }) {\n  const formatter = Intl.NumberFormat(\"cs-CZ\", {\n    style: \"currency\",\n    currency: \"CZK\",\n  });\n  const future = calculateFutureValue(\n    state.saved,\n    state.interest,\n    state.monthlySavings,\n    state.years\n  );\n\n  const inHundredYears = calculateFutureValue(\n    state.saved,\n    state.interest,\n    state.monthlySavings,\n    500\n  ).values.map((value, index) => ({\n    x: yearNow + index,\n    y: value,\n  }));\n\n  console.log(\"future\", future);\n\n  const data = [\n    {\n      id: \"Roční úrok\",\n      data: future.interests.map((value, index) => ({\n        x: yearNow + index,\n        y: value,\n      })),\n    },\n    {\n      id: \"Našetřeno\",\n      data: future.values.map((value, index) => ({\n        x: yearNow + index,\n        y: value,\n      })),\n    },\n  ];\n\n  const endOfTheYearValue = future.values[future.values.length - 1] || 0;\n\n  const endOfTheYearInterest = (endOfTheYearValue * state.interest) / 100 || 0;\n  const monthlyEndOfTheYearInterest = endOfTheYearInterest / 12 || 0;\n\n  return (\n    <div className=\"app is-flexbox has-row-direction\">\n      <div className=\"calculator has-flex\">\n        <div className=\"form is-flexbox has-column-direction\">\n          <div className=\"form-row\">\n            <label>\n              <span className=\"actual-label\">Našetřeno:</span>\n              <br />\n              <NumberField\n                defaultValue={state.saved}\n                step={1000}\n                onChange={(value) =>\n                  setState((prev) => ({\n                    ...prev,\n                    saved: value,\n                  }))\n                }\n              />\n            </label>\n          </div>\n          <div className=\"form-row\">\n            <label>\n              <span className=\"actual-label\">Kolik let spořím:</span>\n              <br />\n              <NumberField\n                defaultValue={Math.max(state.years, 0)}\n                min={0}\n                onChange={(value) =>\n                  setState((prev) => ({\n                    ...prev,\n                    years: Math.max(value, 0),\n                  }))\n                }\n              />\n            </label>\n          </div>\n          <div className=\"form-row\">\n            <label>\n              <span className=\"actual-label\">Měsíčně spořím:</span>\n              <br />\n              <NumberField\n                defaultValue={state.monthlySavings}\n                step={100}\n                onChange={(value) =>\n                  setState((prev) => ({\n                    ...prev,\n                    monthlySavings: value,\n                  }))\n                }\n              />\n            </label>\n          </div>\n          <div className=\"form-row\">\n            <label>\n              <span className=\"actual-label\">Úrok:</span>\n              <br />\n              <NumberField\n                defaultValue={state.interest}\n                onChange={(value) =>\n                  setState((prev) => ({\n                    ...prev,\n                    interest: value,\n                  }))\n                }\n              />\n              %\n            </label>\n          </div>\n          <div className=\"objectives\">\n            <div className=\"future-objectives\">\n              <div className=\"form-row\">\n                <label>\n                  <span className=\"actual-label\">Kolik chcete našetřit:</span>\n                  <br />\n                  <NumberField\n                    defaultValue={state.target}\n                    step={1000}\n                    onChange={(value) =>\n                      setState((prev) => ({\n                        ...prev,\n                        target: value || null,\n                      }))\n                    }\n                  />\n                </label>\n                <div>\n                  <strong>Našetříte v roce:</strong>\n                  <br />\n                  {inHundredYears.find((desc) => desc.y >= state.target)?.x ||\n                    \"Nenašetříte, zvyšte si úrok úspory nebo dobu šetření\"}\n                </div>\n              </div>\n              <div className=\"objective-predictions\">\n                <h2>Po {state.years} letech:</h2>\n                <div>\n                  <strong>Našetříte:</strong>\n                  <br />\n                  {formatter.format(\n                    future.values[future.values.length - 1] || 0\n                  )}\n                </div>\n                <div>\n                  <strong>Roční úrok z našetřené částky:</strong>\n                  <br />\n                  {formatter.format(endOfTheYearInterest)}\n                </div>\n                <div>\n                  <strong>Měsíční úrok z našetřené částky:</strong>\n                  <br />\n                  {formatter.format(monthlyEndOfTheYearInterest)}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"chart has-flex\">\n        <div style={{ height: 600, width: \"100%\" }}>\n          <ResponsiveLine\n            data={data}\n            yFormat={(v) => formatter.format(v)}\n            margin={{ top: 50, right: 100, bottom: 50, left: 110 }}\n            xScale={{ type: \"point\" }}\n            yScale={{\n              type: \"linear\",\n              min: \"auto\",\n              max: \"auto\",\n              stacked: true,\n              reverse: false,\n            }}\n            axisBottom={{\n              orient: \"bottom\",\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              legend: \"Roky\",\n              legendOffset: 36,\n              legendPosition: \"middle\",\n            }}\n            axisLeft={{\n              format: (e) => formatter.format(e),\n              orient: \"left\",\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              legendOffset: -85,\n              legendPosition: \"middle\",\n            }}\n            colors={{ scheme: \"set1\" }}\n            pointSize={10}\n            pointColor={{ theme: \"background\" }}\n            pointBorderWidth={2}\n            pointBorderColor={{ from: \"serieColor\" }}\n            enablePointLabel\n            pointLabel={(e) => formatter.format(e.y)}\n            pointLabelYOffset={-12}\n            useMesh={true}\n            legends={[\n              {\n                anchor: \"bottom-right\",\n                direction: \"column\",\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: \"left-to-right\",\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: \"circle\",\n                symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n                effects: [\n                  {\n                    on: \"hover\",\n                    style: {\n                      itemBackground: \"rgba(0, 0, 0, .03)\",\n                      itemOpacity: 1,\n                    },\n                  },\n                ],\n              },\n            ]}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst stateKey = \"calculatorState\";\n\nfunction getInitialState() {\n  try {\n    const values = JSON.parse(window.localStorage.getItem(stateKey));\n    Object.entries(values || {}).forEach(([key, value]) => {\n      if (isNaN(parseInt(value))) {\n        throw new Error(`Not a number! key: ${key}, value: ${value}`);\n      }\n    });\n    return values;\n  } catch (e) {\n    console.warn(\"State parse error\", e);\n    return null;\n  }\n}\n\nconst savedState = getInitialState();\nconst initialState = savedState || {\n  saved: 100000,\n  years: 10,\n  monthlySavings: 10000,\n  interest: 5,\n  target: 3000000,\n};\n\nlet appState = initialState;\n\nfunction handleWindowClose() {\n  window.localStorage.setItem(stateKey, JSON.stringify(appState));\n}\n\nwindow.addEventListener(\"beforeunload\", handleWindowClose);\nwindow.addEventListener(\"unload\", handleWindowClose);\n\nfunction AppContainer() {\n  const [state, setState] = React.useState(initialState);\n  appState = state;\n\n  return (\n    <App\n      yearNow={new Date().getFullYear()}\n      state={state}\n      setState={(nextState) => {\n        setState(nextState);\n      }}\n    />\n  );\n}\n\nReactDOM.render(<AppContainer />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}